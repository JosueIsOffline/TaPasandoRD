name: PHP Quality Assurance

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

jobs:
  quality-assurance:
    name: Code Quality & Testing
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring
          tools: composer:v2

      # - name: Validate composer.json and composer.lock
      #   run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run test suite
        run: |
          # Run tests without colors to avoid ANSI codes
          composer run-script test --no-ansi > test_output.txt 2>&1 || echo "Tests completed with exit code: $?"
          cat test_output.txt

      - name: 📋 Publish Test Results
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "reports/junit.xml"
          check_name: "PHPUnit Test Suite Results"
          summary: |
            ## 📊 Test Execution Summary

            **Project**: TaPasandoRD  
            **Test Framework**: PHPUnit 12.x  
            **PHP Version**: 8.3  
            **Environment**: Ubuntu Latest  

            ### 📈 Quality Metrics
            - ✅ Code coverage report generated
            - ✅ All tests executed with strict validation  
            - ✅ Composer dependencies validated
          fail_on_failure: true
          require_tests: true
          job_summary: true
          detailed_summary: true

      - name: Comment PR Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            const xmlPath = 'reports/junit.xml';
            const textOutputPath = 'test_output.txt';
            
            let comment = '';
            
            if (fs.existsSync(xmlPath)) {
              // Parse XML results
              const xmlContent = fs.readFileSync(xmlPath, 'utf8');
              const testMatch = xmlContent.match(/tests="(\d+)"/);
              const failureMatch = xmlContent.match(/failures="(\d+)"/);
              const errorMatch = xmlContent.match(/errors="(\d+)"/);
              const timeMatch = xmlContent.match(/time="([^"]+)"/);
              
              const tests = testMatch ? testMatch[1] : '0';
              const failures = failureMatch ? failureMatch[1] : '0';
              const errors = errorMatch ? errorMatch[1] : '0';
              const executionTime = timeMatch ? parseFloat(timeMatch[1]).toFixed(3) : 'N/A';
              const passed = parseInt(tests) - parseInt(failures) - parseInt(errors);
              
              const status = (parseInt(failures) + parseInt(errors)) === 0 ? '✅ PASSED' : '❌ FAILED';
              const emoji = (parseInt(failures) + parseInt(errors)) === 0 ? '🎉' : '⚠️';
              
              // Parse test output for detailed information
              let testDetails = '';
              let timeAndMemory = '';
              
              if (fs.existsSync(textOutputPath)) {
                const textOutput = fs.readFileSync(textOutputPath, 'utf8');
                
                // Clean ANSI codes if any remain
                const cleanOutput = textOutput.replace(/\x1b\[[0-9;]*m/g, '');
                
                // Extract time and memory information
                const timeMemoryMatch = cleanOutput.match(/Time: ([^,]+), Memory: ([^\n]+)/);
                if (timeMemoryMatch) {
                  timeAndMemory = `**Execution Time**: ${timeMemoryMatch[1]} | **Memory Usage**: ${timeMemoryMatch[2]}`;
                }
                
                // Parse test results more reliably
                const lines = cleanOutput.split('\n');
                let testResultLines = [];
                let currentSuite = '';
                
                for (let i = 0; i < lines.length; i++) {
                  const line = lines[i].trim();
                  
                  // Find test suite headers (lines that end with test class names)
                  if (line && line.match(/^[A-Z][a-zA-Z\s]+$/)) {
                    currentSuite = line;
                    testResultLines.push(`\n**${currentSuite}**`);
                  }
                  // Find test results (lines with checkmarks)
                  else if (line.includes('✔')) {
                    let testName = line.replace(/✔/g, '').trim();
                    if (testName) {
                      testResultLines.push(`  ✅ ${testName}`);
                    }
                  }
                  else if (line.includes('✗')) {
                    let testName = line.replace(/✗/g, '').trim();
                    if (testName) {
                      testResultLines.push(`  ❌ ${testName}`);
                    }
                  }
                }
                
                if (testResultLines.length > 0) {
                  testDetails = testResultLines.join('\n');
                } else {
                  // Alternative parsing for different PHPUnit output formats
                  const testSuiteMatch = cleanOutput.match(/([A-Z][a-zA-Z\s]+)\s*\n((?:\s*✔[^\n]*\n?)+)/g);
                  if (testSuiteMatch) {
                    testDetails = testSuiteMatch.map(match => {
                      const lines = match.trim().split('\n');
                      const suiteName = lines[0].trim();
                      const tests = lines.slice(1).map(line => {
                        const testName = line.replace(/✔/g, '').trim();
                        return testName ? `  ✅ ${testName}` : '';
                      }).filter(Boolean);
                      
                      return `**${suiteName}**\n${tests.join('\n')}`;
                    }).join('\n\n');
                  }
                  
                  // If still no details, try extracting from OK summary
                  if (!testDetails) {
                    const okMatch = cleanOutput.match(/OK \((\d+) tests?, (\d+) assertions?\)/);
                    if (okMatch) {
                      testDetails = `**All tests passed successfully!**\n  ✅ ${okMatch[1]} tests completed\n  ✅ ${okMatch[2]} assertions verified`;
                    }
                  }
                }
              }
              
              comment = `## ${emoji} PHP Test Results
              
| Metric | Value |
|--------|-------|
| **Status** | ${status} |
| **Total Tests** | ${tests} |
| **Passed** | ${passed} |
| **Failed** | ${failures} |
| **Errors** | ${errors} |
| **Execution Time** | ${executionTime}s |
| **PHP Version** | 8.3 |
| **PHPUnit Version** | 12.x |

${timeAndMemory ? `### ⏱️ Performance Metrics\n${timeAndMemory}\n` : ''}

${testDetails ? `### 📋 Test Results\n${testDetails}\n` : ''}

### 📁 Available Artifacts
- 📊 Test Results (XML)
- 📝 Detailed Test Output

### 🔗 Quick Links  
- [View Test Run](../actions/runs/${{ github.run_id }})
- [View Workflow](../actions/workflows/Tests.yml)

---
*Generated automatically by GitHub Actions* 🤖`;
              
            } else {
              comment = `## ❌ Test Results Not Available
              
              The test results XML file was not found. This might indicate a test execution failure.
              
              ### 🔗 Quick Links  
              - [View Test Run](../actions/runs/${{ github.run_id }})
              
              ---
              *Generated automatically by GitHub Actions* 🤖`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            reports/junit.xml
            test_output.txt
          retention-days: 30
